{
  "StartAt": "Map",
  "States": {
    "Map": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Prepare Input",
        "States": {
          "Prepare Input": {
            "Type": "Pass",
            "Next": "Check User Auth?",
            "Parameters": {
              "input.$": "States.StringToJson($.body)"
            }
          },
          "Check User Auth?": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.input.access_token",
                "IsPresent": false,
                "Next": "Not Implemented"
              }
            ],
            "Default": "Get Twitch Creators"
          },
          "Get Twitch Creators": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
            "Parameters": {
              "TableName": "${dyanamodb_table_creators_name}",
              "IndexName": "twitch_id_index",
              "FilterExpression": "attribute_exists(twitch_id)",
              "ProjectionExpression": "twitch_id"
            },
            "Next": "Prepare Get User Subscriptions Data",
            "ResultSelector": {
              "creator_ids.$": "$.Items[*].twitch_id.S"
            },
            "ResultPath": "$.get_twitch_creators_output"
          },
          "Prepare Get User Subscriptions Data": {
            "Type": "Pass",
            "Next": "Get User Subscriptions",
            "Parameters": {
              "input.$": "$.input",
              "get_user_subs_input": {
                "twitch_id.$": "$.input.twitch_id",
                "access_token.$": "$.input.access_token",
                "broadcaster_ids.$": "$.get_twitch_creators_output.creator_ids"
              }
            }
          },
          "Get User Subscriptions": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${lambda_get_user_subs_arn}",
              "Payload.$": "$"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Next": "Lambda Error"
              }
            ],
            "Next": "Prepare Send Telegram Subs Data",
            "InputPath": "$.get_user_subs_input",
            "ResultPath": "$.get_user_subs_output"
          },
          "Prepare Send Telegram Subs Data": {
            "Type": "Pass",
            "Parameters": {
              "send_user_invites_input.$": "States.JsonMerge($.input, $.get_user_subs_output.Payload, false)",
              "input.$": "$.input"
            },
            "Next": "Send User Subscriptions"
          },
          "Send User Subscriptions": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${lambda_send_user_invites_arn}",
              "Payload.$": "$"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Next": "Lambda Error"
              }
            ],
            "InputPath": "$.send_user_invites_input",
            "ResultPath": "$.get_user_subs_output",
            "ResultSelector": {
              "payload.$": "$.Payload"
            },
            "End": true
          },
          "Lambda Error": {
            "Type": "Fail"
          },
          "Not Implemented": {
            "Type": "Fail",
            "Comment": "Implement Check User Auth Lambda. If $.input.access_token is not present, then get it from dyanamodb using $.input.user_id"
          }
        }
      },
      "End": true
    }
  }
}